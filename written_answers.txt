Answers for parts  1 - 5
Enter your answers in the designated location. Do NOT remove lines that start
with '=' signs. Removing these lines will break our grading scrips and will
result in 0 points. Also, keep lines to a max of 80 chars long (you do not
need to worry if the top command is longer than 80 chars). Also, please limit
your answers to about 40 words.

================================== P1Q1 start ==================================
Describe how you created the 70%/30% split. 

We find that when nice = 16, the weight is 29. And when nice = 12, weight is 70.
And 29/70 is close to 30/70. Then we design a program myprogram where we fork 
5 times, and we use while(1) to make it run forever. By using the terminal 
command, we run the myprogram twice with different nice value.

	- Include the command lines you executed

taskset -c 1 nice -n 12 ./program &
taskset -c 1 nice -n 16 ./program &
htop

	- Indicate if you needed root privileges for any of those commands

No command need root privilege

	- Include the top output

	0[|                          1.3%]   Tasks: 83, 109 thr; 2 running
	1[|||||||||||||||||||||||||100.0%]   Load average: 9.99 6.86 3.90
  Mem[|||||||||||||||||||||489M/3.81G]   Uptime: 02:22:31
  Swp[                        0K/975M]

	PID▽USER      PRI  NI  VIRT   RES   SHR S CPU% MEM%   TIME+  Command
	2101 debbie     36  16  2172    72     0 R  6.0  0.0  0:17.36 ./program
	2100 debbie     36  16  2172    72     0 R  6.6  0.0  0:17.37 ./program
	2099 debbie     36  16  2172    72     0 R  6.0  0.0  0:17.36 ./program
	2098 debbie     36  16  2172    72     0 R  6.0  0.0  0:17.36 ./program
	2097 debbie     36  16  2172    72     0 R  6.6  0.0  0:17.37 ./program
	2095 debbie     32  12  2172    68     0 R 13.9  0.0  0:42.49 ./program
	2094 debbie     32  12  2172    68     0 R 14.6  0.0  0:42.49 ./program
	2093 debbie     32  12  2172    68     0 R 13.9  0.0  0:42.48 ./program
	2092 debbie     32  12  2172    68     0 R 13.9  0.0  0:42.49 ./program
	2091 debbie     32  12  2172    68     0 R 13.9  0.0  0:42.48 ./program


=================================== P1Q1 end ===================================

================================== P1Q2 start ==================================
Describe how you created a real-time priority task.

We create a new program myprogram2. The only change we made from myprogram is 
that we fork one more time in myprogram2 and set the new process to be real time
by sched_setscheduler().

	- Include the command lines you executed

taskset -c 1 nice -n 16 ./program &
sudo taskset -c 1 nice -n 12 ./program2 &
htop

	- Indicate if you needed root privileges for any of those commands

Running myprogram2 need root privilege because it sets the schedule policy of a
process.

	- Include the top output

    0[|||                       5.3%]   Tasks: 82, 113 thr; 2 running
    1[||||||||||||||||||||||||100.0%]   Load average: 11.81 6.69 2.78
  Mem[||||||||            437M/3.81G]   Uptime: 00:04:49
  Swp[                       0K/975M]

    PID USER      PRI  NI  VIRT   RES   SHR S CPU% MEM%   TIME+  Command△
   1061 debbie     36  16  2172    68     0 R  0.0  0.0  0:01.24 ./program
   1062 debbie     36  16  2172    68     0 R  0.0  0.0  0:01.24 ./program
   1063 debbie     36  16  2172    68     0 R  0.7  0.0  0:01.25 ./program
   1064 debbie     36  16  2172    68     0 R  0.7  0.0  0:01.25 ./program
   1065 debbie     36  16  2172    68     0 R  0.7  0.0  0:01.25 ./program
   1068 root       32  12  2172    68     0 R  0.0  0.0  0:01.59 ./program2
   1069 root       32  12  2172    68     0 R  0.7  0.0  0:01.59 ./program2
   1070 root       32  12  2172    68     0 R  0.7  0.0  0:01.59 ./program2
   1071 root       32  12  2172    68     0 R  0.7  0.0  0:01.59 ./program2
   1072 root       32  12  2172    68     0 R  0.7  0.0  0:01.59 ./program2
   1074 root      -31  12  2172    68     0 R 96.7  0.0  3:42.22 ./program2

=================================== P1Q2 end ===================================



================================== P2Q1 start ==================================
The output of diff or diffconfig when comparing the config files for your 
mainline fallback kernel and your MuQSS kernel

	/* TODO */

=================================== P2Q1 end ===================================

================================== P2Q2 start ==================================
Indicate you successfully patched, built, and booted into your MuQSS-enabled 
Linux kernel.

	/* TODO */

=================================== P2Q2 end ===================================



================================== P3Q1 start ==================================
Describe how you created the 70%/30% split. 
	- Include the command lines you executed
	- Indicate if you needed root privileges for any of those commands
	- How were the results different from P1Q1, if at all.

We asked TA Kevin. And he told us that all we need to do is repeating what we
did in part1, do not necessary to achieve 7/3 split. Hence, our command line
is the same as part1. No root privilege needed. The difference from part1 is
that the ratio is about 9.3/4.2, and the sum of them is about 70% rather than
100%.

=================================== P3Q1 end ===================================

================================== P3Q2 start ==================================
Describe how you created a real-time priority task.
	- Include the command lines you executed
	- Indicate if you needed root privileges for any of those commands
	- How were the results different from P1Q2, if at all.

As above, we did the same thing as part1. Root privilege is needed for the
program that set real time priority. All other 10 process still occupy nearly 
no cpu. The only difference is that the real time process occupy about 70% of 
cpu instead of 100%.

=================================== P3Q2 end ===================================

================================== P3Q3 start ==================================
MuQSS features unprivileged real-time tasks. Perform the previous task with and
without root privileges, and describe the differences. 

Without root privilege, the real time process still occupy most cpu, but it
only occupy 40%-60%. And the process with nice value 16 occupy about 1.7% cpu,
the process with nice value 12 occupy about 3.4%cpu.


================================== P4Q1 start ==================================
Verify Con Kolivas' claim by timing the kernel build-time in both your fallback
and your MuQSS-patched kernels.
    
We run time make -j2 on both kernels, here is our result:
The Muqss kernel had shorter system time, but longer user time and real time.

On Muqss kernel:
real time: 11m36s
user: 21m24s
sys: 2m17s

On cs-4118 kernel:
real time: 10m13s
user: 16m31s
sys: 2m38s



=================================== P4Q1 end ===================================

================================== P4Q2 start ==================================
Design an experiment that you think will highlight MuQSS’s strength. Perform 
the experiment and report your findings.

We compress the hw5 directory (1.1GB) to test the speed of two kernels, and the
final hw5.zip file is 429MB. We found that both kernel use almost same real 
time to compress the hw5. But muqss kernel used more time on user and less time
on system than the origin kernel.

=================================== P4Q2 end ===================================



================================== P5Q1 start ==================================
Briefly describe the advantages and disadvantages of a larger HZ.

Advantages:higher resolution and greater accuracy; system call that employs a
timeout value will be more precise; finer resolution of measurments; process
preemption more accurate.

Disadvantage:more time on time interrupt handler, quicker to overflow.

=================================== P5Q1 end ===================================

================================== P5Q2 start ==================================
What is the HZ currently configured for your running Linux system?

250. We find it by "grep 'CONFIG_HZ=' /boot/config-$(uname -r)"
(100 was found in /linux/include/asm-generic/param.h but wasn't used)

=================================== P5Q2 end ===================================

================================== P5Q3 start ==================================
What are jiffies? Explain the relationship between jiffies, HZ, and time.

The number of ticks that have occurred since the system booted.
Jiffies / HZ = (length of time since the system booted)

=================================== P5Q3 end ===================================

================================== P5Q4 start ==================================
Find the current value of jiffies in your system.
    - In minutes, how much time does this jiffies value represent?
    - Does it match the uptime reported by the uptime command? (Hint: it 
      doesn’t.) Please give the formula to convert jiffies to the current 
      (real) uptime, in minutes.
    - Why does this large difference exist? (Hint: in 32-bit Linux systems,
      jiffies is a 32-bit value.)

jiffies is 4298944282. It represents 4298944282/(250 * 60) = 286569.29 minutes.
No, it doesn't, the real time is 4 hours 30 minutes.
real uptime = (jiffies - (0x100000000- 300 * HZ) )/(HZ * 60) minutes
real uptime = (4298944282 - (0x100000000 - 300 * 250))/(250*60)=270.13 minutes

The jiffies start at 0x100000000 - 300*HZ to test overflow. Because after 300
seconds, the jiffies will need more than 32 bits to represent it.

=================================== P5Q4 end ===================================

================================== P5Q5 start ==================================
What are Niffies? How do they differ from Jiffies?

Niffies are monotonic forward moving timer with nanosecond resolution, which
was used in BFS. Jiffies are with 1/HZ second resolution.
Niffies are per-runqueue variable while Jiffies are per-system global variable.

=================================== P5Q5 end ===================================
